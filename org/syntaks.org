#+SETUPFILE:orgheader-nojs.org
#+TITLE: Syntaks

Det følgende er en blanding av egenskrevet materiale og materiale sterkt inspirert av https://learnxinyminutes.com/docs/python/, gitt ut under en [[https://creativecommons.org/licenses/by-sa/3.0/deed.no][Creative Commons-DelPåSammeVilkår]]-lisens. Det følgende er derfor lisensiert på tilsvarende måte.

* Kommentarer
#+BEGIN_SRC python
# Enkeltlinjekommentarer starter etter #-tegnet
a = 42 # og de kan komme sammen med en vanlig programlinje

# Blokkommanterer går
# over flere linjer

""" De kan også skrives ved å bruke trippelsitater, enten
    med "- eller '-tegnene.
"""
#+END_SRC

* Tall og primitive datatyper
#+BEGIN_SRC python
# Tall evaluerer til seg sjøl

42 # -> 42
3.14 # -> 3.14

# Utregninger er som forventet
1 + 1 # -> 2
9 - 2 # -> 7
21 * 7 # -> 147
21 / 7 # -> 3
3 ** 3 # -> 27
25 // 7 # -> 3 # // gir heltallsdivisjon med svaret rundet ned

# Vi finner resten i et delestykke med modulo-operatoren
25 % 7 # -> 4
# her er 25 = 3 * 7 + 4, altså er 25 // 7 = 3 med 4 i rest

# Regnerekkefølge kan endres med parenteser
(1 + 7) * 4 # -> 32

# Boolske operatorer
True and False # -> False
False or True # -> True

# vi negerer med not
not True # -> False
not False # -> True

# likhet sjekkes med ==
True == True # -> True
True == False # -> False
False == False # -> True
1 == 1 # -> True

# ulikhet sjekkes med !=
1 != 1 # -> False
True != False # -> True

# størrelser kan sammenlignes
1 < 2 # -> True
1 > 2 # -> False
1 < 1 # -> False
1 <= 1 # -> True
1 > 1 # -> False
1 >= 1 # -> True

# Tekststrenger
'kan lages med "-tegnet'
"eller '-tegnet"

# Strenger kan legges sammen
"Hei, " + "verden!" # -> "Hei, verden!"

# Strenger kan ganges med heltall
"Hei!" * 3 # -> "Hei!Hei!Hei!"

# Strenger oppfører seg som en liste av bokstaver
#Hei, verden!"[2] # -> "i"

# Vi kan finne lengden av en streng
len("Hei,verden!") # -> 11

# Vi kan «formatere» strenger ved å lage f-strenger
a = "eple"
b = "appelsin"

f"Mine favorittfrukter er {a} og {b}." # "> "Mine favorittfrukter er eple og appelsin."
#+END_SRC

* Variabler og samlinger
#+BEGIN_SRC python
# Python har en print-funksjon
print("Afrikanske svaler er ikke trekkfugler.") # -> Afrikanske svaler er ikke trekkfugler

# Vi kan motta en streng fra brukeren via input
variabelnavn = input("En prompt til brukeren: ")

# lister lagrer sekvenser av elementer
liste = []
# vi kan opprette en liste med elementer
annen_liste = [2, 3, 4, 5]

# legg til elementer i enden av en liste med append
liste.append(2)  # liste er nå [2]
liste.append(5)  # liste er nå [2, 5]
liste.append(42) # liste er nå [2, 5, 42]
# returner og fjern det siste elementet med pop
liste.pop() #-> 42 # liste er nå [2, 5]
# vi legger inn et par verdier til
liste.append(5) # liste er nå [2, 5, 5]
liste.append(42) # liste er nå [2, 5, 5, 42]

# vi adressere elementer i ei liste med indeks
liste[0] # -> 2 # 0 er indeksen til det første elementet
# vi kan gi nye verdier til elementene ved å bruke indeksering
liste[1] = 7 # liste er nå [2, 7, 5, 42]
# vi kan se på det siste elementet
liste[-1] # -> 5

# om vi forsøker å se utenfor ei liste, får vi en IndexError
liste[3] # hever en IndexError

# i kan hente ut deler av ei liste med slice-notasjon
# (for de som har R1, er dette et lukket/åpent-intervall
liste[1:3] # -> [7, 5]
# Hoppe over begynnelsen
liste[1:] # -> [7, 5, 42]
# Hoppe over slutten
liste[:-1] # -> [2, 7, 5]
# Hoppe over annethvert element
liste[::2] # -> [2, 5]
# Reverser lista
liste[::-1] # -> [42, 5, 7, 2]
# Slicer oppgis altså som listenavn[start_inkludert:slutt_ekskludert:steg]

# Legg sammen to lister med +
annen_liste + liste # -> [2, 3, 4, 5, 2, 7, 42] # merk at begge listene er uendrede

# Utvid en liste med extend
liste.extend(annen_liste) # -> [2, 7, 42, 2, 3, 4, 5] # liste er nå endret

# Fjern første tilfellet av en verdi
liste.remove(3) # liste er nå [2, 7, 42, 2, 4, 5]
# liste.remove(3) # hever en ValueError siden 3 ikke lenger er i lista

# Vi kan sette inn et element ved ønsket indeks med insert
liste.insert(4, 3) # liste er nå [2, 7, 42, 2, 3, 4, 5] igjen

# Få indeksen av det første elementet funnet
liste.index(42)
# liste.index(43) # Hever en ValueError siden 43 ikke er i liste

# Sjekk om et element er i en liste med in
42 in liste # -> True
43 in liste # -> False

# Få lengden til en liste med len
len(liste) # -> 7

# Vi kan returnere en sortert liste
sorted(liste) # -> [2, 2, 3, 4, 5, 5, 7, 42]
# liste er fortsatt [2, 7, 5, 42, 3, 2, 4, 5]
# om vi ønsker å endre liste «in place», kan vi bruke sort()
liste.sort() # liste er nå [2, 2, 3, 4, 5, 5, 7, 42]
#+END_SRC

* Tupler


