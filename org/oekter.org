#+SETUPFILE: orgheader.org
#+TITLE: Økter

#+BEGIN_SRC emacs-lisp :eval query-export :exports none
(add-to-list 'org-html-infojs-options '(sdepth . "2"))
#+END_SRC
* uke 10
** Prosjekt
Nytt prosjekt er omsider på plass. Du finner mer info om det[[file:promo.org::#prosjekt_fysikkmotoren][ her]]. Vi kommer til å bruke nogen lunde samme rammeverk for det siste prosjektet òg, altså en simulering i ~pygame~.

** Vurdering
Ifølge vurderingsplanen har vi satt av tid til vurdering onsdag om en uke, 13. mars. Denne kommer vi til å benytte oss av. Det blir en relativt enkel vurdering, som settes opp à la ukestestene fra i høst, bare at jeg denne gangen også går inn og ser på koden deres. Ting å forberede seg på:

- definerer funksjoner (Oppgavene tilhørende [[file:promo.org::#abstraksjon][abstraksjon]] og [[file:promo.org::#programflyt][programflyt]] (mer utfordrende))
- ~while~-løkker ([[file:promo.org::#programflyt][Fra ett til hundre]] (siste oppgave))
- ~for~-løkker

* uke 5
** Ball-simulering
Følg koden i [[http://programarcadegames.com/python_examples/f.php?file=bouncing_balls.py][denne]] nettsiden ved å skrive kode /ordrett/ av. Pass på at koden kjører slik den er.

Jeg ønsker at du tenker over hva hver linje gjør idet du skriver den av, men du kan se bort fra å skulle beskrive «~class Ball():~»-blokken, og «~if __name__ == "__main__":~»-blokken.

Forsøk så å legge til en endring av ballens hastighet ettersom simuleringen går. Dette er å gi ballen en akselerasjon.
* uke 4
** Asossiasjonslister -- dictionaries
#+BEGIN_SRC python :session dict

import math, numpy
import pygame

pygame.init()
#>>> (6, 0)

SAMPLERATE = 44100

def tone(freq=1000,volume=16000,length=1):
    num_steps = length*SAMPLERATE
    s = []
    for n in range(num_steps):
        value = int(math.sin(n * freq * (6.28318/SAMPLERATE) * length)*volume)
        s.append( [value,value] )
    x_arr = numpy.array(s, dtype='int8')
    return x_arr

pygame.sndarray.make_sound(tone())
#+END_SRC
* uke 3
Vi skal nå begynne med numerisk derivasjon og integrasjon, vi er da godt over i modelleringsbiten av faget.

Denne delen av faget blir ofte mer tydelig om vi har en god måte å visualisere det vi regner ut på. Dersom vi skal se på bokser som kolliderer med hverandre, er det greit faktisk å kunne se boksene. Til dette skal vi bruke spillbiblioteket ~pygame~.

** Installering
Åpne kommandolinja (Windows: windowstasten og skriv ~cmd~. Mac: åpne ~terminal~.). Når du er i kommandolinja, skriv ~pip install --user pygame~. Deretter kan du åpne Spyder og følge tutorialen under.

** Introduksjon til pygame
Som en introduksjon til pygame skal du følge tutorialen du finner [[https://nerdparadise.com/programming/pygame/part1][her]]. Du kan starte under overskriften «The anatomy of a Pygame game». Følg tutorialen til bunnen av sida, altså hele «part 1».

** Noe gikk ikke som det skulle
Finn meg i makerspacet på fredag, så skal jeg forsøke å hjelpe. Makerspacet er området vis-a-vis bordtennisen, inne i trearbeidsområdet.

Lykke til!
* uke 49
** Rammeverk for twittersamtale
[[py:twittersamtale.py]]
* uke 46
*Oppstartsoppgave*
Lag en funksjon som skriver ut første til hundrede kvadrattall.

Bruker:
- en for-løkke
- en funksjon

#+BEGIN_SRC python :session uke46
def kvadrer(n):
    """Kvadrerer tallet."""
    return n ** 2

tallene = list(range(1, 101))

#+END_SRC

#+RESULTS:
#+BEGIN_SRC org
#+END_SRC


Ønsket oppførsel:
#+BEGIN_EXAMPLE
1
4
9
16
...
10000
#+END_EXAMPLE

*Mål for dagen*
Begynne med en kravspesifikasjon til programmet. Ett av kompetansemålene i faget er at du skal kunne

- omgjøre problemstillinger til konkrete delproblemer, vurdere hvilke av disse delproblemene som lar seg løse digitalt, og utforme løsninger for disse.

Du har nå valgt prosjektoppgave

#+BEGIN_SRC python :session uke46 :results output org
print("hei")
#+END_SRC

#+RESULTS:
#+BEGIN_SRC org
Python 3.7.1 (default, Oct 22 2018, 10:41:28) 
[GCC 8.2.1 20180831] on linux
Type "help", "copyright", "credits" or "license" for more information.
hei
#+END_SRC

* uke 39
:PROPERTIES:
:CUSTOM_ID: uke39
:header-args:  :tangle ../py/uke39.py
:END:
** Oppstartsoppgave
Beskriv de ulike elementene av følgende program:

#+BEGIN_SRC python
import math

tallet = 42

skurten = math.sqrt(tallet)
#+END_SRC
** Fjerde ord i en setning
Dere fikk en oppgave om å lage en funksjon som henter ut fjerde ord i en setning. La oss si funksjonen heter ~fjerde_ord~, skal altså funkjsonen fungere på følgende måte:
#+BEGIN_EXAMPLE
>>> setningen = "Dette er en lang setning som har mange flere enn fire ord."
>>> fjerde_ord(setningen)
lang
#+END_EXAMPLE

Under kommer en definisjon som vil fungere for denne, så en forklaring på hva de ulike elementene er i denne definisjonen.

#+BEGIN_SRC python :session fjerde :results silent :exports code
def fjerde_ord(setning):
    """Ta inn en teksstreng, `setning`, og returner det fjerde ordet i setningen."""

    ord_i_liste = setning.split(" ")
    returverdi = ord_i_liste[3]

    return returverdi
#+END_SRC

Om vi forsøker å kalle denne funksjonen, som over, får vi altså:

#+BEGIN_SRC python :session fjerde :results output org :exports both
setningen = "Dette er en lang setning som har mange flere enn fire ord."
retur_av_funksjonskall = fjerde_ord(setningen)
print(retur_av_funksjonskall)
#+END_SRC

#+RESULTS:
#+BEGIN_SRC org
lang
#+END_SRC

Vi går gjennom dette linje for linje.

#+BEGIN_SRC python
def fjerde_ord(setning):
#+END_SRC

Her forteller vi at vi ønsker å /definere/ en funksjon, som får navnet «~fjerde_ord~», og som skal ta inn én parameter, som for resten av funksjonsdefinisjonen heter «~setning~».

De følgende linjene, som er rykket inn i forhold til definisjonssetningen, kaller vi /funksjonskroppen/, det er her vi sier hva funksjonen skal gjøre.

#+BEGIN_SRC python
ord_i_i_liste = setning.split(" ")
#+END_SRC

Vi lager her en variabel som kun tilhører funksjonskroppen, som vi kaller ~ord_i_liste~. Denne variabelen skal være en liste av alle ordene i tekststrengen som vi sendte til funksjonen, ~setning~. For å få til dette, bruker vi listemetoden ~split~. (Akkurat nå kan vi tenke på /metoder/ som funksjoner som tilhører visse typer. Det gir mening å splitte opp en teksstreng, men det gir ikke mening å splitte opp et heltall.) Vi gjør dette ved å skrive ~setning.split(" ")~. Vi sier her «ta teksstrengen ~setning~, og splitt denne opp til en liste, hvor du har splittet ved hvert mellomrom i setningen.

Hva tror ~oppdelt~ er etter linjene under?

#+BEGIN_SRC python
sammensatt = """Dette er en lang, veldig lang, faktisk, setningen,
med drøssevis av innskutte, på riktig måte, sjølsagt, leddsetninger."""
# Her har jeg brukt tre anførselstegn for å kunne å linjeskift i tekststrengen.

oppdelt = sammensatt.split(",")
#+END_SRC

Vel, vi har altså nå en liste med ord, kalt ~ord_i_liste~, som vi ønsker å hente ut det fjerde ordet fra. Vi trenger da å huske at lister en indeksert med null som første element i Python. Da er ~liste[0]~ det første elementet, ~liste[1]~ det andre, ~liste[2]~ det tredje og ~liste[3]~ det fjerde. Vi kunne nå helt fint ha sagt at returverdien til funksjonen skulle være ~ord_i_liste[3]~, ved bare å skrive

#+BEGIN_SRC python
return ord_i_liste[3]
#+END_SRC

men jeg har her valgt å lage en returvariabel, kalt ~returverdi~. De siste linjene i funksjonskroppen blir da

#+BEGIN_SRC python
returverdi = ord_li_liste[3]
return returverdi
#+END_SRC

Vi har nå laget en funksjon som oppfører seg på følgende måte:

#+BEGIN_SRC dot :file ../figurer/oekter_fjerde_ord.png :cmdline -Kdot -Tpng :exports results
digraph {
// graph from left to right
rankdir=LR;
splines=true;
node [shape=box, fontname="Open Sans"];
edge [fontname="Open Sans"];

input [label="Inndata", style=invis]
funk [label="fjerde_ord"]
output [label="Utdata", style=invis]

input -> funk [label="En setning med flere enn fire ord"]
funk -> output [label="Det fjerde ordet i setningen"]
}
#+END_SRC

#+RESULTS:
[[fig:oekter_fjerde_ord.png]]

Den neste utfordringen er da å finne ut hvordan vi skal kunne lage en funksjon som returnerer det /n/-te ordet i en setning.
* uke 38
:PROPERTIES:
:CUSTOM_ID: uke38
:header-args:  :tangle ../py/uke38.py
:END:
** Oppstart prosjekt
- Bakgrunnsstoff 1: [[https://www.telegraph.co.uk/news/2018/04/28/russian-twitter-bots-attempted-influence-election-supporting/][The Telegraph]]
- Bakgrunnsstoff 2: [[https://www.b.dk/globalt/robotter-stoetter-sverigedemokraterna-og-partier-bliver-cyberangrebet-digitalt-pres][Berlingske]]
- Prosjektside: [[file:promo.org::#prosjekt_twitterboten][Twitter-boten]]

* uke 37
:PROPERTIES:
:CUSTOM_ID: uke37
:header-args:  :tangle ../py/uke37.py
:END:
** Oppstartsoppgave 1
Hva gjør følgende program?

#+begin_src dot :file ../figurer/oekter_37_2018_oppstart1.png :cmdline -Kdot -Tpng :results silent :exports none
digraph {
   	graph[fontname="Open Sans"];
	node[fontname="Open Sans"];
	edge[fontname="Open Sans"];

    start[shape="box", style=rounded];
    end[shape="box", style=rounded];

    if_valid[shape="diamond", style="", label="tall > 15"];
    message[shape="parallelogram", style="", label="print: prøv igjen", fontsize=12];
    input[shape="parallelogram", style="", label="input: tall"];
 
    start -> input;
    input -> if_valid;
    if_valid -> message[label="False"];
    if_valid -> end[label="True"];
    message -> input;
}
#+end_src
[[fig:oekter_37_2018_oppstart1.png]]
** Oppstartsoppgave 2
#+begin_src dot :file ../figurer/oekter_37_2018_oppstart2.png :cmdline -Kdot -Tpng :results silent :exports none
digraph {
   	graph[fontname="Open Sans"];
	node[fontname="Open Sans"];
	edge[fontname="Open Sans"];

    start[shape="box", style=rounded];
    end[shape="box", style=rounded];

    message[shape="parallelogram", style="", label="print: prøv igjen", fontsize=12];
    input[shape="parallelogram", style="", label="input: tall"];
    init_f[shape="parallelogram", style="", label="f = []"];
    init_i[shape="paralellelogram", style="", label="i = 1"];
    if_mod[shape="diamond", style="", label="tall % i == 0"];
    if_il[shape="diamond", style="", label="i > tall"];
    incl_f[shape="diamond", style="", label="f.append(i)"];
    incr_i[shape="diamond", style="", label="i += 1"];

    start -> input;
    input -> init_f;
    init_f -> init_i;
    init_i -> if_il;
    if_il -> end[label="True"];
    if_il -> if_mod[label="False"];
    if_mod -> incl_f[label="True"];
    if_mod -> incr_i[label="False"];
    incl_f -> incr_i;
    incr_i -> if_il;
}
#+end_src
[[fig:oekter_37_2018_oppstart2.png]]

** Forventet status så langt
*** Enkel regning
Fagstoff: [[file:promo.org::#regnerekkefoelgeogkommandolinja][regnerekkefølge og kommandolinja]]

Oppgaver: [[file:promo.org::#basispython-kortoppgaver][Kortoppgaver]]

*** Bruk av variabler
Fagstoff: [[file:promo.org::#variabler][Variabler]]

*** ~if~-setninger
Fagstoff: [[file:promo.org::#dersomsaa][dersom ... så ...]]

Oppgaver: [[file:promo.org::#programflyt-oppgaver-abc][abc-formelen]]

*** Funksjoner
Fagstoff: [[file:promo.org::#funksjoner][Funksjoner]]

Oppgaver:
- [[file:promo.org::#abstraksjon-kortoppgaver][Kortoppgaver]]
- [[file:promo.org::#sammeutfall][Samme utfall?]]

*** ~while~-løkker
Fagstoff: [[file:promo.org::#mensviventer][Mens vi venter]]

Oppgaver:
- [[file:promo.org::#collatzformodning][Collatz' formodning]]
- 
* uke 36                                                                             :avholdt::PROPERTIES:
:CUSTOM_ID: uke36
:header-args:  :tangle ../py/uke36.py
:END:
** Installering
1. anaconda (noe som inneholder python, og litt ymse annet)
2. pycharm (det dere skal bruke for å skrive python)
3. git (versjonskontroll av kode)

** Avansert ~print~
[[file:promo.org::*Printing][/Printing/ i «boka»]]

#+include: "promo.org::#printing" :only-contents t

** Boolske variable

** En første løkke
*** Recap: if-setning
Skriv et program som tar inn et navn. Og bruker funksjonen ~len~ (f.eks. len("hei") # => 3)

*Oppdrag*
Lag et program som ber brukeren om å taste inn navnet sitt, for så å skrive "Oi, det var langt" dersom navnet er på over 4 bokstaver.

- if-setning
- ~input~
- ~print~

#+BEGIN_SRC python
navn = input("Skriv navnet ditt: ") # trond
lengde_navn = len(navn) # lengde_navn er nå 5

if lengde_navn > 3:
    print("Oi. Det var langt.")
#+END_SRC

~langde_navn > 3~ er her en test som enten gir ~True~ eller ~False~.

*** Sammenlignere («comparitors»
~a > b~ - a større enn b
~a < b~ - a mindre enn b
~a >= b~ - a større eller lik enn b
~a <= b~ - a mindre enn eller lik enn b

~a == b~ - a lik b
~a != b~ - a ulik b 


*** while-løkke

#+BEGIN_SRC python
tall = 100

while tall >= 1:
    print(tall)
#+END_SRC


*** Siste operator
Kjør følgende linjer:

#+BEGIN_SRC python :results output
print(3 % 2)  # => 1 
print(5 % 7)  # => 5
print(7 % 2)  # => 1
print(9 % 3)  # => 0
print(11 % 9) # => 2
#+END_SRC          

                                     
Hva gjør %-operatoren?

Den gir resten etter et delestykke.

*Utfordring*

Programmet under skal kun skrive ut partall.
#+BEGIN_SRC python
tall = 100

while tall >= 1:
    # Her setter dere inn noe
    tall = tall - 1
#+END_SRC




** En løkkketype til

** Installere git
*** Bruker hos bitbucket eller github
*** Lokal installasjon av git
*** Laste opp en enkelt-fil
*** konfigurer git til å bruke brukernavn og e-post du ønsker tilbakemeldinger over


** Utfordring
Collatz' formodning fra [[file:promo.org::*Collatz'%20formodning][«boka»
* uke 35                                                                             :avholdt:
:PROPERTIES:
:CUSTOM_ID: uke35
:header-args:  :tangle ../py/uke35.py
:END:
[[py:uke35.py]]
** Definere en funksjon 
#+BEGIN_SRC python :session uke35
def f(x):
    """Et enkelt polynom."""
    return x ** 2 + 5 * x - 4
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :session uke35 :results output raw
print(f(2))
print(f(4))
print(f(-5))
#+END_SRC

#+RESULTS:
10
32
-4


** Åpningsoppgaver
*** Forklar operasjonen
Kjør følgende linjer i Python og beskriv hva som skjer:
#+BEGIN_SRC python :exports code
2 // 3
4 // 5
5 // 5
7 // 7
8 // 7
10 // 3
0 // 4
12 // 4
#+END_SRC

*** Forklar hva funksjonene gjør
#+BEGIN_SRC python
funk1(1, 4)  # => 5
funk1(2, 2)  # => 4
funk1(3, 5)  # => 8
funk1(4, -6) # => -2
#+END_SRC

#+BEGIN_SRC python
funk2(2, 4)  # => 16
funk2(3, 3)  # => 27
funk2(90, 0) # => 1
#+END_SRC

#+BEGIN_SRC python
funk3(3) # => True
funk3(2) # => False
funk3(11) # => True
funk3(1) # => True
funk3(22) # => False
#+END_SRC

#+BEGIN_SRC python :exports none :session funk3 :results output raw
def funk3(n):
    a, b = 0, 1
    while n >= 1:
        a, b = b + a, a
        n -= 1
    print(a)
    return a
#+END_SRC

#+BEGIN_SRC python :session funk3 :results output raw :exports code
funk3(1)  # => 1  
funk3(2)  # => 1  
funk3(3)  # => 2  
funk3(5)  # => 5  
funk3(10) # => 55 
#+END_SRC

** Funksjoner
- bakgrunnsstoff :: [[file:promo.org::*Funksjoner][Funksjoner]]


** «Tallsjekkern»
Lag et program med følgende oppførsel:
1. Be brukeren om et tall
2. Skriv ut tallet brukeren ga

#+BEGIN_SRC python :tangle ../py/uke35_tallsjekkern.py
# Be brukeren om et tall
tall = input("Skriv inn et tall:")
# Endre 'tall' til ikke å være tekststreng
tall = int(tall) # nå er det et heltall


print("Du ga meg tallet: ", tall)

if tall > 10:
    print("Oi. Det var stort!")
    print("Jeg er fortsatt i if-setninga.")
else:
    print("Jøsses ... det var et bitte lite tall.")
#+END_SRC

** Kvadratrøtter
#+BEGIN_SRC python
import math # Alternativ 1
from math import sqrt # Alternativ 2

kvadratrot = math.sqrt(2) # Hvis alt. 1
kvadratrot = sqrt(2)      # Hvis alt. 2
print(kvadratrot)
#+END_SRC

** Oppgaver
#+BEGIN_SRC python
if arbeid_så_langt == "altfor lett":
    # lag et program som ber brukern om tre tall (a, b, c)
    # og løser andregradslikningen a*x^2 + b*x + c = 0

elif arbeid_så_langt == "helt passe":
    # Lag nye programmer à la tallsjekkern.py hvor dere ber om input
    # og skriver ut noe basert på inputen.
    # Utfordring: Skriv ut om input var partall eller oddetall
    #             (sjekk syntaksark ('y') i «boka» etter %-operator

else: #altså alt er for vanskelig
    # Gå gjennom eksempler fra sist en gang til.n
#+END_SRC

*** Til neste gang, uke 36
Forsøk å fylle ut funksjonen under.


#+BEGIN_SRC python
from math import sqrt

def abc_loeser(a, b, c):
    """Denne funksjonen løser andregradslikningen:
    a x^2 + b x + c = 0

    x1,2 = (-b +- sqrt(b^2 - 4ac) / 2a
    """

    # Det som avgjør hvor mange løsninger vi har
    # er 'determinanten' d = b^2 - 4 a c
    # d > 0 : to løsninger
    # d == 0: en løsniong
    # d < 0 : ingen løsninger
    if d > 0:
        # gjør noe
        loesninger = "ett eller annet"
    elif d == 0:
        # gjør noe
        loesninger = "ett eller annet"
    else:
        # gjør noe
        loesninger = "ett eller annet"


    return loesninger
#+END_SRC
* uke 34                                                                             :avholdt:
:PROPERTIES:
:CUSTOM_ID: uke34
:header-args:  :tangle ../py/uke34.py
:END:
[[py:uke34.py]]
** Introduksjon
- Se på [[https://tarjeiba.github.io/promo/promo.html#org99cf12d]]
- Hvis ikke python er lagt inn på maskinene. [[https://repl.it]]

** Notater
#+BEGIN_SRC python :results output 
print("Hello world!") # I Python, er #-tegnet mbrukt til kommentarer
#+END_SRC

#+BEGIN_SRC python

print("Hello world!")
hei = "Vær hilset!" # lagrer "vær hilset!" som variabel hei
print(hei) # her er 'hei' et variabelnavn
# Hvorfor gir print(hei) feil?

# Datatyper
a = 3 # heltall
b = 3.1 # kommatall, flyttall
c = "Dette er tekst" # teksstreng
d = 'Dette er også en tekststreng'
e = 'Dette er en tekststreng med "anførselstegn"'

input("Det som skal stå på skjermen")
#+END_SRC

#+BEGIN_SRC python
# Et program som dobler et tall
tall = input("Gi meg et tall:") # tall er nå en tekststreng
tall = float(tall)
print("tall:", tall)

print("Det dobbelte av tall er:")
dobbelt = tall * 2
print(dobbelt)
#+END_SRC

#+BEGIN_SRC python
3 ** 2 # 3^2
#+END_SRC


#+BEGIN_TASK
- Be om et navn, skriv ut "Hei på deg, {navn}"    # Husk print("Hei på deg", navn)
- Be om ett tall, skriv ut tallet opphøyd i andre.
- Be om ett tall, skriv ut tre lavere enn tallet, så ganger to # Test med tall = 1 => -4
- Be om ett tall, skriv ut det dobbelte av tallet i fjerde
- Be om to tall, skriv ut summen av dem
- Be om to tall, skriv ut produktet av dem
- Be om to tall, skriv ut det første opphøyd i det andre
#+END_TASK

* uke 39                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke39
:header-args:  :tangle ../py/uke39.py
:END:

* uke 41                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke41
:header-args:  :tangle ../py/uke41.py
:END:

* uke 42                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke42
:header-args:  :tangle ../py/uke42.py
:END:

* uke 43                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke43
:header-args:  :tangle ../py/uke43.py
:END:

* uke 44                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke44
:header-args:  :tangle ../py/uke44.py
:END:

* uke 45                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke45
:header-args:  :tangle ../py/uke45.py
:END:

* uke 46                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke46
:header-args:  :tangle ../py/uke46.py
:END:

* uke 47                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke47
:header-args:  :tangle ../py/uke47.py
:END:

* uke 48                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke48
:header-args:  :tangle ../py/uke48.py
:END:

* uke 49                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke49
:header-args:  :tangle ../py/uke49.py
:END:

* uke 50                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke50
:header-args:  :tangle ../py/uke50.py
:END:

* uke 51                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke51
:header-args:  :tangle ../py/uke51.py
:END:

* uke 52                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke52
:header-args:  :tangle ../py/uke52.py
:END:

* uke 1                                                                             :noexport:
:PROPERTIES:
:CUSTOM_ID: uke1
:header-args:  :tangle ../py/uke1.py
:END:

* uke 2                                                                             :noexport:
:PROPERTIES:
:CUSTOM_ID: uke2
:header-args:  :tangle ../py/uke2.py
:END:

* uke 3                                                                             :noexport:
:PROPERTIES:
:CUSTOM_ID: uke3
:header-args:  :tangle ../py/uke3.py
:END:

* uke 4                                                                             :noexport:
:PROPERTIES:
:CUSTOM_ID: uke4
:header-args:  :tangle ../py/uke4.py
:END:

* uke 5                                                                             :noexport:
:PROPERTIES:
:CUSTOM_ID: uke5
:header-args:  :tangle ../py/uke5.py
:END:

* uke 6                                                                             :noexport:
:PROPERTIES:
:CUSTOM_ID: uke6
:header-args:  :tangle ../py/uke6.py
:END:

* uke 7                                                                             :noexport:
:PROPERTIES:
:CUSTOM_ID: uke7
:header-args:  :tangle ../py/uke7.py
:END:

* uke 9                                                                             :noexport:
:PROPERTIES:
:CUSTOM_ID: uke9
:header-args:  :tangle ../py/uke9.py
:END:

* uke 10                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke10
:header-args:  :tangle ../py/uke10.py
:END:

* uke 11                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke11
:header-args:  :tangle ../py/uke11.py
:END:

* uke 12                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke12
:header-args:  :tangle ../py/uke12.py
:END:

* uke 13                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke13
:header-args:  :tangle ../py/uke13.py
:END:

* uke 14                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke14
:header-args:  :tangle ../py/uke14.py
:END:

* uke 15                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke15
:header-args:  :tangle ../py/uke15.py
:END:

* uke 16                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke16
:header-args:  :tangle ../py/uke16.py
:END:

* uke 17                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke17
:header-args:  :tangle ../py/uke17.py
:END:

* uke 18                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke18
:header-args:  :tangle ../py/uke18.py
:END:

* uke 19                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke19
:header-args:  :tangle ../py/uke19.py
:END:

* uke 20                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke20
:header-args:  :tangle ../py/uke20.py
:END:

* uke 21                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke21
:header-args:  :tangle ../py/uke21.py
:END:

* uke 22                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke22
:header-args:  :tangle ../py/uke22.py
:END:

* uke 23                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke23
:header-args:  :tangle ../py/uke23.py
:END:

* uke 24                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke24
:header-args:  :tangle ../py/uke24.py
:END:

* uke 25                                                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: uke25
:header-args:  :tangle ../py/uke25.py
:END:
