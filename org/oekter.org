#+SETUPFILE: orgheader.org
#+TITLE: Økter i Programmering og modellering
#+BIND: org-time-stamp-custom-formats '("<%Y uke %W: %e.%m>" . "<%Y uke %W: %e. %m %H:%M>")
#+BIND: org-display-custom-times t
#+BEGIN_SRC emacs-lisp :eval query-export :exports none
(add-to-list 'org-html-infojs-options '(sdepth . "2"))
#+END_SRC

#+RESULTS:
#+BEGIN_SRC org
#+END_SRC


* Boolsk algebra og lister
- [X] Repetisjon fra sist
- [ ] Funksjoner uten «bieffekter»
- [ ] Funksjoner som enkelt repeterbare kodeblokker
- [ ] Lister
- [ ] Et første plot med lister

[[pdf:uke38_innlevering.pdf][Innleveringsoppgaver]]
** Innleveringsoppgaver uke 38 :noexport:
:properties:
:export_file_name: ../pdf/38_innlevering.pdf
:end:

Ved å bruke designmønsteret fra [[py:uke38_sqrt.py][kvadratrotutregningene]] lag et program som gjør følgende:
- Ber brukeren om to /heltall/
- Regner ut /produktet/ av de to tallene
- Regner ut /kvotienten/ til de to tallene (det første delt på det andre, hvor du bruker heltallsdivisjon)
- Regner ut /resten/ til divisjonen av det første delt på det andre tallet

Her må du tenke etter hvilken test du ønsker å bruke.

Av regneoperasjoner, får du kun bruke /addisjon/ og /subtraksjon/.

* Løkker
<2019-09-11 Wed>
- [X] Recap fra sist
- [X] ~While~-løkker

[[pdf:37_innlevering.pdf][Innleveringsoppgaver]]

Her er et foreslått [[py:uke37_lf.py][løsningsforslag]] til innleveringsoppgavene.
** Innleveringsoppgaver uke 37 :noexport:
:properties:
:export_file_name: ../pdf/37_innlevering.pdf
:end:
*** Collatz' formodning
Lag et program som ber brukeren om et tall, og som skriver ut tallene som følger fra dette tallet fra Collatz' formodning.

#+BEGIN_DEFINITION
Collatz' formodning

Hvis $n$ er et partall, del det på 2. Hvis $n$ er et oddetall, gang det med 3 og legg til 1.
#+END_DEFINITION

#+BEGIN_EXAMPLE
>>> n = 5
5
16
8
4
2
1
#+END_EXAMPLE

*** Utfordring
Eksempelet over viser at ~5~ går innom seks verdier før det lander på ~1~ (~5 16 8 4 2 1~). Hvilket tall under 10000 går innom flest verdier før det lander på ~1~?
* Forgreining
<2019-09-04 Wed>
- [X] Recap om basisregning
- [X] Input fra bruker
- [X] ~if~-setninger
- [X] Indentering og blokkstruktur

[[pdf:36_innlevering.pdf][Innleveringsoppgaver]]

** Kommentarer fra sist
- Husk å importere biblioteker i fila du leverer, det du gjør i konsollen følger ikke med leveringa.

** Innleveringsoppgaver uke 36 :noexport:
:properties:
:export_file_name: ../pdf/36_innlevering.pdf
:end:
*** Andregradsløser
Lever en fil ~uke36_ditt_navn.py~ hvor du løser følgende oppgave:

Du skal lage et program som ber brukeren om tre tall, ~a~, ~b~, og ~c~. Programmet ditt skal så løse likningen \[ax^2 + bx + c = 0\] og skrive svaret eller svarene ut for brukeren.

*** Tilleggsutfordring: Faktorisering 
Utvid programmet slik at det skriver ut det faktoriserte uttrykket for brukeren.

* Grunnleggende regning
<2019-08-21 Wed>
- [X] Basisregning
- [X] ~.py~-filer
- [X] Typer
- [ ] Funksjoner og funksjonssignaturer

[[pdf:33_innlevering.pdf][Innleveringsoppgaver]]
** Innleveringsoppgaver uke 34 :noexport:
:properties:
:export_file_name: ../pdf/34_innlevering.pdf
:end:
Lever en fil ~uke33_ditt_navn.py~ hvor du regner ut og skriver ut svarene til følgende oppgaver:

1) $2\cdot2$
2) $2 + 3^{51} - 17$
3) Antall tegn i teksstrengen «dette er en mellomlang setning som er skrevet via innfallsmetoden».
4) $\sqrt{17}$ med tre siffer etter desimaltegnet.

Svarene dine skal altså se ut som følger:
#+BEGIN_SRC python :exports results
from math import sqrt
print(2 * 2)
print(2 + 3 ** 51 - 17)
print(len("dette er en mellomlang setning som er skrevet via innfallsmetoden"))
print(f"{sqrt(17):.3f}")
#+END_SRC

#+RESULTS:
#+BEGIN_SRC org
4
2153693963075557766310732
65
4.123
#+END_SRC

Lykke til!
